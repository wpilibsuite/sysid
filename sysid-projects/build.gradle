plugins {
  id "cpp"
  id "google-test-test-suite"
}

apply from: "${rootDir}/config.gradle"
nativeUtils.withCrossRoboRIO()

def exeGenerateTask = nativeUtils.generateResources('generateExeResources').get()
exeGenerateTask.outputDirectory = project.file('build/generated/exe')
exeGenerateTask.prefix = project.name
exeGenerateTask.namespace = 'sysid'
def libCreateTask = null
def libGenerateTask = null

if (project.name == 'drive') {
  libGenerateTask = nativeUtils.generateResources('generateLibResources').get()
  libGenerateTask.outputDirectory = project.file('build/generated/lib')
  libGenerateTask.prefix = 'libraries'
  libGenerateTask.namespace = 'sysid'

  apply from: '../resources.gradle'
  libCreateTask = createLibDeployTask(libGenerateTask)
}

model {
  components {
    frcUserProgram(NativeExecutableSpec) {
      targetPlatform nativeUtils.wpi.nativePlatforms.roborio
      if (!project.hasProperty("skipDesktopRobots"))
        targetPlatform nativeUtils.wpi.nativePlatforms.desktop

      sources.cpp {
        source {
          srcDirs 'src/main/cpp'
          include '**/*.cpp'
        }
        exportedHeaders.srcDirs 'src/main/include'
      }

      binaries.all {
        it.cppCompiler.define("PROJECT_ROOT_DIR", "$projectDir")
        if (project.hasProperty("integration")) {
          it.cppCompiler.define("INTEGRATION")
        }
        lib project: ":sysid-library", library: "libsysid", linkage: "static"

        nativeUtils.wpi.vendorDeps.nativeVendor.cpp(it)

        // In order for vendors to work correctly, we must always build with shared wpilib
        nativeUtils.useRequiredLibrary(it, 'wpilib_executable_shared')
      }
    }
    embeddedBinary(NativeLibrarySpec) {
      targetPlatform nativeUtils.wpi.nativePlatforms.desktop

      sources.cpp {
        source {
          srcDirs 'src/main/empty', 'build/generated/exe', 'build/generated/lib', 'build/generated/libdeploy'
        }
      }

      binaries.all {
        if (it instanceof SharedLibraryBinarySpec) {
          it.buildable = false
          return
        }
        it.tasks.withType(AbstractNativeSourceCompileTask) {
          dependsOn exeGenerateTask
          if (libCreateTask != null) {
            dependsOn libCreateTask
          }
        }
      }
    }
  }
  tasks {
    $.components.frcUserProgram.binaries.each { bin ->
      // Create a task that installs the desktop executable with shared linking.
      if (bin.targetPlatform.name == nativeUtils.wpi.nativePlatforms.desktop && bin.name.toLowerCase().contains("release"))
        project.tasks.create("installDesktopExe") {
          dependsOn bin.tasks.install
          ext.setProperty("runScriptFile${project.name}",
              bin.tasks.install.runScriptFile.get().asFile.toString())
        }

      // Create a task that installs and copies the roboRIO executable and libraries.
      if (project.name != "analysis-test" && bin.targetPlatform.name == nativeUtils.wpi.nativePlatforms.roborio &&
          bin.name.toLowerCase().contains("release")) {
        exeGenerateTask.source.from(bin.tasks.install.executableFile)
        exeGenerateTask.dependsOn bin.tasks.install
        // Only copy the libs once, from the drive mechanism
        if (libGenerateTask != null) {
          libGenerateTask.source.from(bin.tasks.install.libs.filter {
            !it.toString().endsWith('.so.debug')
          })
          libGenerateTask.dependsOn bin.tasks.install
        }
      }
    }
  }
}

task installSimulateNativeRelease {
  dependsOn 'installFrcUserProgram' + nativeUtils.wpi.nativePlatforms.desktop.capitalize() + 'ReleaseExecutable'
}

class CustomExec extends AbstractExecTask<CustomExec> {
  @Inject
  public CustomExec() {
      super(CustomExec.class);
      getOutputs().upToDateWhen(spec -> false);
  }


  @TaskAction
  @Override
  protected void exec() {
    def installTask = project.tasks.named('installFrcUserProgram' + project.nativeUtils.wpi.nativePlatforms.desktop.capitalize() + 'ReleaseExecutable').get()
    println installTask
    setExecutable(installTask.getRunScriptFile().get().getAsFile())
    super.exec()
  }
}

task simulateNativeRelease(type: CustomExec) {
  dependsOn(installSimulateNativeRelease)
}
