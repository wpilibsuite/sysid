plugins {
  id "cpp"
  id "google-test-test-suite"
  id "edu.wpi.first.GradleRIO"
}

// For using remote development artifacts
wpi.maven.useDevelopment = true

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
  targets {
    roborio(getTargetTypeClass('RoboRIO')) {
      // Team number is loaded either from the .wpilib/wpilib_preferences.json
      // or from command line. If not found an exception will be thrown.
      // You can use getTeamOrDefault(team) instead of getTeamNumber if you
      // want to store a team number in this file.
      team = project.frc.getTeamNumber()
      debug = project.frc.getDebugOrDefault(false)

      artifacts {
        // First part is artifact name, 2nd is artifact type
        // getTargetTypeClass is a shortcut to get the class type using a string
        frcCpp(getArtifactTypeClass('FRCNativeArtifact')) {
        }

        // Static files artifact
        frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
          files = project.fileTree('src/main/deploy')
          directory = '/home/lvuser/deploy'
        }
      }
    }
  }
}

// Define the deploy artifact to use later.
def deployArtifact = deploy.targets.roborio.artifacts.frcCpp

// Use release mode for simulation.
wpi.cpp.debugSimulation = false

// Enable simulation extensions when not in CI. Also add ws_client when
// using Romi.
dependencies {
  if (System.getenv()["CI"] == null) {
    wpi.sim.addGui().defaultEnabled = true
    wpi.sim.addDriverstation()
  }

  if (project.hasProperty("romi")) {
    wpi.sim.addWebsocketsClient().defaultEnabled = true
    wpi.sim.envVar("HALSIMWS_HOST", "10.0.0.2")
  }
}

model {
  components {
    frcUserProgram(NativeExecutableSpec) {
      targetPlatform wpi.platforms.roborio
      if (!project.hasProperty("skipDesktopRobots"))
        targetPlatform wpi.platforms.desktop

      sources.cpp {
        source {
          srcDirs 'src/main/cpp'
          include '**/*.cpp'
        }
        exportedHeaders.srcDirs 'src/main/include'
      }

      deployArtifact.component = it
      wpi.cpp.enableExternalTasks(it)

      wpi.sim.enable(it)

      binaries.all {
        it.cppCompiler.define("PROJECT_ROOT_DIR", "$projectDir")
        if (project.hasProperty("integration")) {
          it.cppCompiler.define("INTEGRATION")
        }
        lib project: ":sysid-library", library: "libsysid", linkage: "static"

        wpi.cpp.vendor.cpp(it)

        // We must build statically for roboRIO; however, we have to build shared for desktop
        // in order for simulation modules to work correctly.
        // TODO: Remove project name check once GR and NU are updated.
        if (it.targetPlatform.name == wpi.platforms.roborio && project.name != "analysis-test")
          wpi.cpp.deps.wpilibStatic(it)
        else
          wpi.cpp.deps.wpilib(it)

      }
    }
  }
  tasks {
    $.components.frcUserProgram.binaries.each { bin ->
      // Create a task that installs the desktop executable with shared linking.
      if (bin.targetPlatform.name == wpi.platforms.desktop && bin.name.toLowerCase().contains("release"))
        project.tasks.create("installDesktopExe") {
          dependsOn bin.tasks.install
          ext.setProperty("runScriptFile${project.name}",
              bin.tasks.install.runScriptFile.get().asFile.toString())
        }

      // Create a task that installs and copies the roboRIO executable with static linking.
      if (project.name != "analysis-test" && bin.targetPlatform.name == wpi.platforms.roborio &&
          bin.name.toLowerCase().contains("release")) {
        Task copy = project.tasks.create("installRioExe", Copy) {
          from(bin.tasks.install.executableFile)
          into("$rootDir/sysid-application/src/main/native/resources")

          rename { _ -> "frcUserProgram${project.name.capitalize()}.out" }
          dependsOn bin.tasks.install
        }
        project.build.dependsOn copy
      }
    }
  }
}

task installSimulateNativeRelease {
  dependsOn 'installFrcUserProgram' + wpi.platforms.desktop.capitalize() + 'ReleaseExecutable'
}
