import org.gradle.internal.os.OperatingSystem;
// This configures native dependencies for building Glass extensions,
// including WPILib versions, etc.

// Add WPI extensions.
nativeUtils.addWpiNativeUtils()

// Configure WPILib, wpimath, and Dear ImGui versions.
nativeUtils.wpi.configureDependencies {
  wpiVersion = wpilibVersion
  wpimathVersion = wpilibVersion
  imguiVersion = "1.82-1"
  googleTestVersion = "1.9.0-5-437e100-1"
}

// Configure wpigui, libglass, libglassnt.
nativeUtils {
  dependencyConfigs {
    wpigui {
      groupId = "edu.wpi.first.wpigui"
      artifactId = "wpigui-cpp"
      headerClassifier = "headers"
      sourceClassifier = "sources"
      ext = "zip"
      version = wpilibVersion
      staticPlatforms.addAll(nativeUtils.wpi.platforms.desktopPlatforms)
    }
    libglass {
      groupId = "edu.wpi.first.glass"
      artifactId = "libglass"
      headerClassifier = "headers"
      sourceClassifier = "sources"
      ext = "zip"
      version = wpilibVersion
      staticPlatforms.addAll(nativeUtils.wpi.platforms.desktopPlatforms)
    }
    libglassnt {
      groupId = "edu.wpi.first.glass"
      artifactId = "libglassnt"
      headerClassifier = "headers"
      sourceClassifier = "sources"
      ext = "zip"
      version = wpilibVersion
      staticPlatforms.addAll(nativeUtils.wpi.platforms.desktopPlatforms)
    }
    libssh {
      groupId = "edu.wpi.first.thirdparty.frc2022"
      artifactId = "libssh"
      headerClassifier = "headers"
      sourceClassifier = "sources"
      ext = "zip"
      version = libsshVersion
      staticPlatforms.addAll(nativeUtils.wpi.platforms.desktopPlatforms)
    }
  }
  combinedDependencyConfigs {
    gui {
      libraryName = "gui"
      targetPlatforms.addAll(nativeUtils.wpi.platforms.desktopPlatforms)
      dependencies <<
          "wpimath_static" << "ntcore_static" << "wpiutil_static" <<
          "libglassnt_static" << "libglass_static" << "wpigui_static" << "imgui_static"
    }
    ssh {
      libraryName = "ssh"
      targetPlatforms.addAll(nativeUtils.wpi.platforms.desktopPlatforms)
      dependencies << "libssh_static"
    }
  }
}

// Enable builds for all platforms.
model {
  components {
    all {
      nativeUtils.useAllPlatforms(it)
    }
  }
  binaries {
    withType(NativeBinarySpec).all {
      nativeUtils.usePlatformArguments(it)
    }
  }
}
