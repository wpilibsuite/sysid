import org.gradle.internal.os.OperatingSystem;
// This configures native dependencies for building Glass extensions,
// including WPILib versions, etc.

// Configure wpigui, libglass, libglassnt.
nativeUtils {
  nativeDependencyContainer {
    libglassnt_static(getNativeDependencyTypeClass('WPIStaticMavenDependency')) {
      groupId = "edu.wpi.first.glass"
      artifactId = "libglassnt"
      headerClassifier = "headers"
      sourceClassifier = "sources"
      ext = "zip"
      version = nativeUtils.wpi.versions.wpiVersion.get()
      targetPlatforms.addAll(nativeUtils.wpi.platforms.desktopPlatforms)
    }
    libglass_static(getNativeDependencyTypeClass('WPIStaticMavenDependency')) {
      groupId = "edu.wpi.first.glass"
      artifactId = "libglass"
      headerClassifier = "headers"
      sourceClassifier = "sources"
      ext = "zip"
      version = nativeUtils.wpi.versions.wpiVersion.get()
      targetPlatforms.addAll(nativeUtils.wpi.platforms.desktopPlatforms)
    }
    wpigui_static(getNativeDependencyTypeClass('WPIStaticMavenDependency')) {
      groupId = "edu.wpi.first.wpigui"
      artifactId = "wpigui-cpp"
      headerClassifier = "headers"
      sourceClassifier = "sources"
      ext = "zip"
      version = nativeUtils.wpi.versions.wpiVersion.get()
      targetPlatforms.addAll(nativeUtils.wpi.platforms.desktopPlatforms)
    }
    imgui_static(getNativeDependencyTypeClass('WPIStaticMavenDependency')) {
        groupId = "edu.wpi.first.thirdparty.frc2023"
        artifactId = "imgui"
        headerClassifier = "headers"
        sourceClassifier = "sources"
        ext = "zip"
        version = imguiVersion
        targetPlatforms.addAll(nativeUtils.wpi.platforms.allPlatforms)
    }

    // Combined
    gui(getNativeDependencyTypeClass('AllPlatformsCombinedNativeDependency')) {
      dependencies = [
                      "libglassnt_static", "libglass_static", "wpigui_static",
                      "imgui_static", "wpimath_static", "ntcore_static",
                      "wpinet_static", "wpiutil_static"]
    }
  }
}

// Enable builds for all platforms.
model {
  components {
    all {
      nativeUtils.useAllPlatforms(it)
    }
  }
  binaries {
    withType(NativeBinarySpec).all {
      nativeUtils.usePlatformArguments(it)
    }
  }
}
